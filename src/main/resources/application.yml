#  对象的两种写法
#firends:{lastName: 'zhangsan' ,age: 20 }

#firends2:
#     lastName: zhangsan
#     age: 20

#数组的两种写法
#pets: [cat,daog,pig]
# -空格 值  表示数组中的一个元素
#pets2:
#  - cat
#  - dog
#  - pig

#   <!--导入配置文件处理器，配置文件进行绑定就会有提示 例：person下输入a则age就提示出来了-->
#        <dependency>
#            <groupId>org.springframework.boot</groupId>
#            <artifactId>spring-boot-configuration-processor</artifactId>
#            <optional>true</optional>
#        </dependency>
#配置文件占位符
#随机数  random.value   random.int  ........
#占位符获取之前配置的值，如果没有可以指定默认值

server:
  port: 8081
spring:
  profiles:
    active: pro
---
server:
  port: 8082

  person:
    lastName: 张8082_${random.uuid}
    age:  ${random.int(10)}
    sex: ${person.lastName}_man  # ${person.hello:hello}_man
    maps: {aaa: aaa,bbb: bbb,ccc: ccc}
    lists:
    - a
    - b
    - c
spring:
  profiles: dev
#debug: true


#修改log打印级别
#  //日志的级别
#  //从低到高
#  //可以调整输出的日志级别；日志就只会在这个级别以后的高级别生效
#  logger.trace("这是trace日志");
#  logger.debug("这是debug信息");
#  //SpringBoot默认给的是info级别，如果没指定就是默认的root级别
#  logger.info("这是info日志");
#  logger.warn("这是warn信息");
#  logger.error("这是Error信息");
logging:
  level:
    com.cc: trace
  file: spring.log
---

server:
  port: 8083
person:
  lastName: 张8083_${random.uuid}
  age:  ${random.int(10)}
  sex: ${person.lastName}_man  # ${person.hello:hello}_man
  maps: {aaa: aaa,bbb: bbb,ccc: ccc}
  lists:
  - a
  - b
  - c
spring:
  profiles: pro
